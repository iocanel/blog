#+BLOG: iocanel.com
#+POSTID: 470
#+DATE: [2018-09-13 Thu 09:50]
#+BLOG: iocanel.com
#+ORG2BLOG:
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
#+TITLE: Service Catalog: Connector
#+DESCRIPTION: The service catalog connector
#+CATEGORY: Development
#+TAGS: Kubernetes, Openshift, Service Catalog, Spring

* Introduction
This is the second post in my series about the [[https://svc-cat.io][service catalog]]. If you haven't done already please read the first post: [[http://iocanel.com/2018/09/service-catalog-part-1/][service catalog: introduction]].

In this second post I'll create from scratch a [[https://spring.io/projects/spring-boot][spring boot]] application that exposes a JPA crud via rest. 
This application will use a [[https://svc-cat.io][service catalog]] managed [[https://www.microsoft.com/en-us/sql-server/sql-server-2017][microsoft sql server]] database and I will demonstrate how you can automagically connect to it using the [[https://github.com/snowdrop/servicecatalog-connector][service catalog connector]].

* The spring cloud connector
There is a [[https://cloud.spring.io][spring cloud]] project called [[https://cloud.spring.io/spring-cloud-connectors][spring cloud connectors]]. This project is all about connecting to cloud managed services. I have been working on an implementation specific to the [[https://svc-cat.io][service catalog]]. 
The idea is that you can use the [[https://svc-cat.io][service catalog]] to manage the services and use the [[https://github.com/snowdrop/servicecatalog-connector][service catalog connector]] to transparently connect to it.

At the moment it supports only relational databases, but support for additional services will be added shortly.

* Preparation  

Most of the preparation has been already performed in the [[http://iocanel.com/2018/09/service-catalog-part-1/][previous post]] but I'll recap:

- Started an [[https://openshift.com][openshift]] cluster.
- Installed the [[https://svc-cat.io][service catalog]].
- Provisioned a [[https://www.microsoft.com/en-us/sql-server/sql-server-2017][microsoft sql server]] database instance (ironically) called `mymssql`. 
  
So what's left? 

We need to also configure permissions...
  
** Allowing our app to talk to the service catalog
Out of the box (if we logged in as admins) we can list brokers, service classes, instances and bindings using `svcat`. Unfortunately, this is not the case for our application.
The default service account is not expected to have permissions, so we need to grant them:

#+BEGIN_SRC shell
oc adm policy add-cluster-role-to-user system:openshift:service-catalog:aggregate-to-view system:serviceaccount:myproject:default
oc adm policy add-cluster-role-to-user system:aggregate-to-admin system:serviceaccount:myproject:default
#+END_SRC

The command above granted service catalog view permissions to the the default service account of my project (which is literally called `myproject` and its the default project created for us).

Now, we are ready to move to the actual application.

* The actual code
I'll use the [[https://spring.io/projects/spring-boot][spring boot]] cli to generate a jpa rest application:

#+BEGIN_SRC shell
spring init -d=data-jpa,data-rest,sqlserver demo.zip
#+END_SRC

To easily deploy the project into kubernetes/openshift add the fabric8 maven plugin to your pom.xml:

#+BEGIN_SRC xml
    <plugin>
       <groupId>io.fabric8</groupId>
       <artifactId>fabric8-maven-plugin</artifactId> 
       <version>3.5.40</version>
     </plugin>
#+END_SRC
 

Now, lets create an entity. How about a `Person`?
Our person will be a simple JPA annotated POJO, with just:

- id
- first name
- last name

... and it could look like:

#+BEGIN_SRC java
  import javax.persistence.Entity;
  import javax.persistence.Id;
  import javax.persistence.GeneratedValue;
  import javax.persistence.GenerationType;


  @Entity
  public class Person {
      @Id
      @GeneratedValue(strategy = GenerationType.AUTO)
      private Long id;
      private String firstName;
      private String lastName;

      public Long getId() {
        return this.id;
      }

      public void setId(Long id) {
        this.id=id;
      }

      public String getFirstName() {
             return firstName;
      }

      public void setFirstname(String firstName) {
        this.firstName=firstName;
      }

      public String getLastName() {
             return lastName;
      }

      public void setLastname(String lastName) {
        this.lastName=lastName;
      }
#+END_SRC

To easily perform CRUD operations for our Person we need a repository.
Here's one that uses [[https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/PagingAndSortingRepository.html][PagingAndSortingRepository]] from [[https://projects.spring.io/spring-data/][spring data]]. 

#+BEGIN_SRC java
  import org.springframework.data.repository.PagingAndSortingRepository;
  import org.springframework.data.repository.query.Param;
  import org.springframework.data.rest.core.annotation.RepositoryRestResource;

  import java.util.List;


  @RepositoryRestResource(collectionResourceRel = "people", path = "people")
  public interface PersonRepository extends PagingAndSortingRepository {

      List findByLastName(@Param("name") String name);
  }
#+END_SRC

JPA-wise the last thing we need is to include some [[https://www.microsoft.com/en-us/sql-server/sql-server-2017][microsoft sql server]] specifc configuration in our application.properties:

#+BEGIN_SRC 
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLServerDialect
spring.jpa.database-platform=org.hibernate.dialect.SQLServerDialect
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
#+END_SRC

And now we are done! Wait, how do we make the application talk to our sql server?

* Adding the service catalog connector
We just need to add the connector to the class path:


#+BEGIN_SRC xml
          <dependency>
            <groupId>me.snowdrop</groupId>
            <artifactId>servicecatalog-connector</artifactId>
            <version>0.0.2</version>
          </dependency>
#+END_SRC

And also create a simple bean for our DataSource:

#+BEGIN_SRC java
import org.springframework.cloud.config.java.AbstractCloudConfig;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.sql.DataSource;

@Configuration
public class CloudConfig extends AbstractCloudConfig {

    @Bean
    public DataSource dataSource() {
       return this.connectionFactory().service("mymssql", DataSource.class);
    }
}
#+END_SRC
This bean does all the dirty work for us. It detects the service instance, gets the binding of the instance and from there reads the secret that contains all connection details. Last but not least it used those details to create the Datasource that the application needs.

Magic !!!

* Deploying the application
This is easily accomplished with f-m-p:

#+BEGIN_SRC shell
mvn clean package fabric8:resources fabric8:package fabric8:deploy
#+END_SRC

* Testing the integration
Now, we should be able to create a person using `curl`:

#+BEGIN_SRC shell
curl -i -X POST -H "Content-Type:application/json" -d "{  \"firstName\" : \"John\",  \"lastName\" : \"Doe\" }" `oc get endpoints | grep demo | awk -F " " '{print $2}'`/people
#+END_SRC

The command above gets the endpoint of our demo application and uses that in order to perform a curl. I used direct access to the endpoint as it something that works with `oc cluster up` without requiring much additional configuration. If you have a simpler approach feel free to provide some feedback.

Note: that the command is referring to `demo` as this was the mame of choice when generating the application. If you used something else you'll need to align.

* Epilogue
I hope you found that useful. Feel free to give a glimpse at: https://spring.io/guides/gs/accessing-data-rest which was used as a reference in this post.

Enjoy!
